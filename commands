#!/usr/bin/env bash

set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

PLUGIN_DIR=$(dirname $0)

case "$1" in
    cmp:app:list)
        for app in $(ls -d $DOKKU_ROOT/*/ 2>/dev/null); do
            if [[ -f "$app/refs/heads/master" ]]; then
                basename "$app"
            fi
        done
        ;;
    cmp:env:list)
        # sad, but dokku have no env-vars hook, dokku-alt have
        APP="$2"
        : | pluginhook env-vars "$APP" | cut -d"=" -f1
        ;;
    cmp:env:list:known)
        [[ -z $2 ]] && exit 1
        APP="$2"
        APPVARS=$(pluginhook env-vars "$APP" | cut -d"=" -f1)

        # FIXME: Find way to detect dokku and dokku-alt
        ALL_DOKKU_VARS="
BUILDPACK_URL DOKKU_CHECKS_WAIT"
#         # dokku (deprecated for dokku-alt)
        DOKKU_VARS="DOKKU_WAIT_TO_RETIRE"
         # dokku-alt env vars
        DOKKU_ALT_VARS="
DOKKU_WAIT_TO_RETIRE DOKKU_DISABLE_AUTO_APP_CREATE BUILDSTEP_IMAGE MARIADB_IMAGE
MONGODB_IMAGE POSTGRESQL_IMAGE REDIS_IMAGE DOKKU_LISTEN_IPV4 DOKKU_LISTEN_IPV6
DOKKU_FORCE_ENABLE_HSTS DOKKU_DISABLE_NGINX_X_FORWARDED MARIADB_PORT MARIADB_COMMAND
MARIADB_CONTAINER_VOLUME MARIADB_CONTAINER_PASSWORD MONGODB_PORT MONGODB_COMMAND
MONGODB_CONTAINER_VOLUME MONGODB_CONTAINER_PASSWORD POSTGRESQL_USER POSTGRESQL_PORT
POSTGRESQL_COMMAND POSTGRESQL_CONTAINER_VOLUME POSTGRESQL_CONTAINER_PASSWORD
REDIS_PORT REDIS_COMMAND REDIS_CONTAINER_VOLUME"
        cat & cat <<EOF
$APPVARS
$ALL_DOKKU_VARS
$DOKKU_VARS
$DOKKU_ALT_VARS
EOF
        ;;
    completion)
        HOSTNAME=$(hostname -f)

        [[ -z $2 ]] && echo "echo Please specify command that you use to connect to dokku host \"$HOSTNAME\"
echo \"ssh -t dokku@$HOSTNAME completion dokku-cli | sudo bash\"
echo \"Or:\"
echo \"ssh -t dokku@$HOSTNAME completion dokku-cli example.com | sudo bash\"" && exit 1
        [[ -n $3 ]] && HOSTNAME="$3"

        CMD="$2"
        HASH=`echo $CMD | md5sum | cut -f1 -d" "`
        SEPARATOR="###########################################"
        MAGIC="DOKKU_COMPLETION_CLI"
        cat<<EOF
#!/usr/bin/env bash
$SEPARATOR

# Dokku completion for command: $CMD and host: $HOSTNAME

# Check if command "$CMD" exists and generated by 'dokku completion'
if [[ -f "/usr/local/bin/$CMD" ]] && ! grep -q "$MAGIC" "/usr/local/bin/$CMD"; then
   echo "Command /usr/local/bin/$CMD exists and looks it not generated by \"ssh dokku@$HOSTNAME completion $CMD\""
   echo "Aborted."
   exit 1
fi

echo "Install /etc/bash_completion.d/$CMD"
$SEPARATOR
# Completion script
(
cat <<'EOF'
EOF
        cat $PLUGIN_DIR/cmp_template | \
            sed -e "s/^\\(\\s*_DOKKU_CMD\\)=.*/\\1=\"$CMD\"/g" | \
            sed -e "s/^\\(\\s*_dokku_cmd_LOCAL_DOKKU\\)=.*/\\1=\"$CMD\"/g" | \
            sed -e "s/LOCAL_DOKKU/$HASH/ig"
        echo "EOF"
        cat<<EOF
) > "/etc/bash_completion.d/$CMD"
# end of completion
$SEPARATOR

echo "Install /usr/local/bin/$CMD"
echo "#!/usr/bin/env bash
# autogenerated by ssh dokku@$HOSTNAME completion $CMD
# -- $MAGIC --

ssh -t dokku@$HOSTNAME \\\$@ 2>/dev/null
" > "/usr/local/bin/$CMD"
chmod +x "/usr/local/bin/$CMD"

echo ". /etc/bash_completion.d/$CMD"
. "/etc/bash_completion.d/$CMD"
EOF
        ;;
    help)
        cat && cat<<EOF
    completion [command] [hostname]                 Create completion file for bash
EOF
        ;;
    *)
        exit $DOKKU_NOT_IMPLEMENTED_EXIT
        ;;

esac
